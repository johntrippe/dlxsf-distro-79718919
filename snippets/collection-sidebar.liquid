{% comment %}
  The code below relies on the advanced-tag-loop snippet.
  The snippet is already included in snippets/breadrumbs.liquid
  because it is needed there too, but if you remove
  breadcrumbs you need to include this:

  {% include 'advanced-tag-loop' %}
{% endcomment %}

<!-- START DROPDOWNS -->

    <div class="grid-uniform" style="padding-right: 10px;">

        <div class="grid-item small--one-half medium--one-third">

<ul class="clearfix filters">
  <li class="clearfix filter">
    {% assign tags = '48mm,50mm,51mm,52mm,53mm,54mm,55mm,56mm,57mm,58mm,59mm,60mm,143,7.0 - 7.49,7.5 - 7.9,8.0 - 8.124,8.125 - 8.24,8.25 - 8.37,8.38 - 8.49,8.5 - 8.74,8.75 - 8.9,9.0 +,143, Lo 145, Hi 145, Lo 147, Hi 147, Hi 149, Hi 151, Lo 5.0, Hi 5.0, Lo 5.2, Hi 5.2, Hi 5.8' | split: ',' %}
    <label>Filter by Size</label>
    <select class="coll-filter">
      <option value="">All</option>
      {% for t in tags %}
      {% assign tag = t | strip %}
      {% if current_tags contains tag %}
      <option value="{{ tag | handle }}" selected>{{ tag }}</option>
      {% elsif collection.all_tags contains tag %}
      <option value="{{ tag | handle }}">{{ tag }}</option>
      {% endif %}
      {% endfor %}
    </select>
  </li>
  <li class="clearfix filter">
    {% assign tags = 'Andrew Allen, Youness Amrani, Mike Anderson, David Bachinsky, Theotis Beasley, Raney Beres, Brandon Biebel, Justin Brock, Dennis Busenitz, John Cardiel, Brad Cromer, Jake Donnelly,Dan Drehobl, Erik Ellington, Chima Ferguson,  Frank Gerwer, Mark Gonzales, Jeff Grosso, Felipe Gustavo, James Hardy, Peter Hewitt, Marc Johnson, Corey Kennedy, Sean Malto, Josh Matthews, Tony Miorana, Shane ONeill, Chris Pfanner, Torey Pudwill, Peter Ramondetta, Paul Rodriguez, Andy Roy, Robbie Russo, Max Schaaf,  Julien Stranger, Grant Taylor, Davis Torgerson, Tony Trujillo, Nick Tucker, Ishod Wair, Kyle Walker, Sebo Walker, Brandon Westgate, Bobby Worrest' | split: ',' %}
    <label>Filter by Pro</label>
    <select class="coll-filter">
      <option value="">All</option>
      {% for t in tags %}
      {% assign tag = t | strip %}
      {% if current_tags contains tag %}
      <option value="{{ tag | handle }}" selected>{{ tag }}</option>
      {% elsif collection.all_tags contains tag %}
      <option value="{{ tag | handle }}">{{ tag }}</option>
      {% endif %}
      {% endfor %}
    </select>
  </li>
  <li class="clearfix filter">
    {% assign tags = '80HD Softcruiser Wheels, Pro Classic Series, Team Classics, Formula Four Colored Wheels, Colored Wheels, Formula Four Pro Wheels, Formula Four Team Wheels' | split: ',' %}
    <label>Filter by Style</label>
    <select class="coll-filter">
      <option value="">All</option>
      {% for t in tags %}
      {% assign tag = t | strip %}
      {% if current_tags contains tag %}
      <option value="{{ tag | handle }}" selected>{{ tag }}</option>
      {% elsif collection.all_tags contains tag %}
      <option value="{{ tag | handle }}">{{ tag }}</option>
      {% endif %}
      {% endfor %}
    </select>
  </li>
 <li class="clearfix filter">
    {% assign tags = 'Antihero, Real, Spitfire, Krooked, Thunder, Venture' | split: ',' %}
    <label>Filter by Brand</label>
    <select class="coll-filter">
      <option value="">All</option>
      {% for t in tags %}
      {% assign tag = t | strip %}
      {% if current_tags contains tag %}
      <option value="{{ tag | handle }}" selected>{{ tag }}</option>
      {% elsif collection.all_tags contains tag %}
      <option value="{{ tag | handle }}">{{ tag }}</option>
      {% endif %}
      {% endfor %}
    </select>
  </li>
</ul>

<script>
  /* Product Tag Filters - Good for any number of filters on any type of collection page.
     Give you product tag filter select element a class of coll-filter.
     Give your collection select a class of coll-picker.
     Brought to you by Caroline Schnapp. */
  Shopify.queryParams = {};
  if (location.search.length) {
    for (var aKeyValue, i = 0, aCouples = location.search.substr(1).split('&'); i < aCouples.length; i++) {
      aKeyValue = aCouples[i].split('=');
      if (aKeyValue.length > 1) {
        Shopify.queryParams[decodeURIComponent(aKeyValue[0])] = decodeURIComponent(aKeyValue[1]);
      }
    }
  }
  jQuery('.coll-picker').change(function() {
    if (jQuery(this).val()) {
      location.href = '/collections/' + jQuery(this).val();
    }
    else {
      location.href = '/collections/all';
    }
  });
  var collFilters = jQuery('.coll-filter');
  collFilters.change(function() {
    delete Shopify.queryParams.page;
    var newTags = [];
    collFilters.each(function() {
      if (jQuery(this).val()) {
        newTags.push(jQuery(this).val());
      }
    });
    {% if collection.handle %}
    var newURL = '/collections/{{ collection.handle }}';
    if (newTags.length) {
      newURL += '/' + newTags.join('+');
    }
    var search = jQuery.param(Shopify.queryParams);
    if (search.length) {
      newURL += '?' + search;
    }
    location.href = newURL;
    {% else %}
    if (newTags.length) {
      Shopify.queryParams.constraint = newTags.join('+');
    }
    else {
      delete Shopify.queryParams.constraint;
    }
    location.search = jQuery.param(Shopify.queryParams);
    {% endif %}
  });
</script>

        </div>
    </div>

<!-- END DROPDOWNS -->

